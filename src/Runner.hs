-- Program to test parser, automatically generated by BNF Converter.

module Runner where 

-- import Prelude
--   ( ($)
--   , Either(..)
--   , Int, (>)
--   , String, (++), unlines
--   , Show, show
--   , Bool, True, False 
--   , IO, (>>), (>>=), mapM_, putStrLn
--   , FilePath
--   , getContents, readFile
--   )
import System.Environment ( getArgs )
import System.Exit        ( exitFailure, exitSuccess )
import Control.Monad      ( when )

import Types ( Program )
import Lex   ( Token )
import Par   ( pProgram, myLexer )
import Print ( Print, printTree )
import Skel  ()
import StaticTypeChecker ( checkProgram )
import Interpreter ( runProgram )

type Err        = Either String
type ParseFun a = [Token] -> Err a
type Verbosity  = Int

putStrV :: Verbosity -> String -> IO ()
putStrV v s = when (v > 1) $ putStrLn s

runFile :: Verbosity -> ParseFun Program -> FilePath -> IO ()
runFile v p f = putStrV v f >> readFile f >>= run v p

runFileTypecheck :: Verbosity -> FilePath -> IO (Err ())
runFileTypecheck v f = readFile f >>= runTypeCheck v

runTypeCheck :: Verbosity -> String -> IO (Err ())
runTypeCheck v s =
  case pProgram ts of 
    Left err -> do
      putStrV v "\nParse              Failed...\n"
      putStrV v "Tokens:"
      putStrV v $ show ts
      putStrLn err
      pure (Left "Error while Parsing")
    Right tree -> do
      putStrV v "\nParse Successful - Preparing typecheck!"
      showTree v tree
      pure $ checkProgram tree
  where
  ts = myLexer s

run :: Verbosity -> ParseFun Program -> String -> IO ()
run v p s =
  case p ts of
    Left err -> do
      putStrV v "Tokens:"
      putStrV v $ show ts
      putStrLn err
      exitFailure
    Right tree -> do
      showTree v tree
      case checkProgram tree of 
        Left err -> do 
          putStrLn "TYPECHECK ERROR:"
          putStrLn err 
          exitFailure 
        Right _ -> do 
          res <- runProgram tree
          case res of 
            Left err -> putStrLn ("RUNTIME ERROR: " ++ err) >> exitFailure 
            Right code -> if code == 0 then exitSuccess else exitFailure
  where
  ts = myLexer s

showTree :: (Show a, Print a) => Int -> a -> IO ()
showTree v tree = do
  putStrV v $ "\n[Abstract Syntax]\n\n" ++ show tree
  putStrV v $ "\n[Linearized tree]\n\n" ++ printTree tree

usage :: IO ()
usage = do
  putStrLn $ unlines
    [ "usage: Call with one of the following argument combinations:"
    , "  --help          Display this help message."
    , "  (no arguments)  Parse stdin verbosely."
    , "  (files)         Parse content of files verbosely."
    , "  -s (files)      Silent mode. Parse content of files silently."
    ]
  exitFailure
