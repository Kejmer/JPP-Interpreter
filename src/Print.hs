{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}

-- | Pretty-printer for Syntax.
--   Generated by the BNF converter.

module Print where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, dropWhile, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified Types

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i = \case
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    [";"]        -> showChar ';'
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : ts@(p:_) | closingOrPunctuation p -> showString t . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i     = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t s =
    case (all isSpace t', null spc, null rest) of
      (True , _   , True ) -> []              -- remove trailing space
      (False, _   , True ) -> t'              -- remove trailing space
      (False, True, False) -> t' ++ ' ' : s   -- add space if none
      _                    -> t' ++ s
    where
      t'          = showString t []
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt     _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Types.Ident where
  prt _ (Types.Ident i) = doc $ showString i

instance Print Types.Program where
  prt i = \case
    Types.MyProgram stmts -> prPrec i 0 (concatD [prt 0 stmts])

instance Print Types.Block where
  prt i = \case
    Types.Blok stmts -> prPrec i 0 (concatD [doc (showString "do"), prt 0 stmts, doc (showString "end")])

instance Print Types.HBlock where
  prt i = \case
    Types.AsProc pblock -> prPrec i 0 (concatD [prt 0 pblock])
    Types.AsStmt stmt -> prPrec i 0 (concatD [prt 0 stmt])

instance Print Types.Stmt where
  prt i = \case
    Types.BStmt block -> prPrec i 0 (concatD [prt 0 block])
    Types.DeclConst basictype id_ expr -> prPrec i 0 (concatD [prt 0 basictype, doc (showString "mut"), prt 0 id_, doc (showString "="), prt 0 expr])
    Types.DeclMut basictype id_ expr -> prPrec i 0 (concatD [prt 0 basictype, prt 0 id_, doc (showString "="), prt 0 expr])
    Types.Ass id_ expr -> prPrec i 0 (concatD [prt 0 id_, doc (showString "="), prt 0 expr])
    Types.ArrAss id_ expr1 expr2 -> prPrec i 0 (concatD [prt 0 id_, doc (showString "["), prt 0 expr1, doc (showString "]"), doc (showString "="), prt 0 expr2])
    Types.Ret expr -> prPrec i 0 (concatD [doc (showString "return"), prt 0 expr])
    Types.If expr hblock -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 hblock])
    Types.IfElse expr hblock1 hblock2 -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 hblock1, doc (showString "else"), prt 0 hblock2])
    Types.While expr hblock -> prPrec i 0 (concatD [doc (showString "while"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 hblock])
    Types.Print expr -> prPrec i 0 (concatD [doc (showString "print"), doc (showString "("), prt 0 expr, doc (showString ")")])
    Types.For expr proc_ -> prPrec i 0 (concatD [doc (showString "for"), prt 0 expr, prt 0 proc_])
    Types.SExp expr -> prPrec i 0 (concatD [prt 0 expr])
    Types.FDef basictype id_ args pblock -> prPrec i 0 (concatD [doc (showString "def"), prt 0 basictype, prt 0 id_, doc (showString "("), prt 0 args, doc (showString ")"), prt 0 pblock])
    Types.FDefAlt basictype id_ args lambda -> prPrec i 0 (concatD [doc (showString "def"), prt 0 basictype, prt 0 id_, doc (showString "("), prt 0 args, doc (showString ")"), prt 0 lambda])
  prtList _ [] = concatD []
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ";"), prt 0 xs]

instance Print [Types.Stmt] where
  prt = prtList

instance Print Types.Type where
  prt i = \case
    Types.Ref basictype -> prPrec i 0 (concatD [doc (showString "&"), prt 0 basictype])
    Types.MutRef basictype -> prPrec i 0 (concatD [doc (showString "&mut"), prt 0 basictype])
    Types.Mut basictype -> prPrec i 0 (concatD [doc (showString "mut"), prt 0 basictype])
    Types.Const basictype -> prPrec i 0 (concatD [prt 0 basictype])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [Types.Type] where
  prt = prtList

instance Print Types.BasicType where
  prt i = \case
    Types.Arr basictype -> prPrec i 0 (concatD [prt 0 basictype, doc (showString "[]")])
    Types.Int -> prPrec i 0 (concatD [doc (showString "int")])
    Types.Str -> prPrec i 0 (concatD [doc (showString "string")])
    Types.Bool -> prPrec i 0 (concatD [doc (showString "bool")])
    Types.Void -> prPrec i 0 (concatD [doc (showString "void")])
    Types.Fun basictype types -> prPrec i 0 (concatD [prt 0 basictype, doc (showString "lambda"), doc (showString "("), prt 0 types, doc (showString ")")])
    Types.TProc basictype args types -> prPrec i 0 (concatD [prt 0 basictype, doc (showString "proc"), doc (showString "["), prt 0 args, doc (showString "]"), doc (showString "("), prt 0 types, doc (showString ")")])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [Types.BasicType] where
  prt = prtList

instance Print Types.Proc where
  prt i = \case
    Types.PDec args1 args2 block -> prPrec i 0 (concatD [doc (showString "proc"), doc (showString "["), prt 0 args1, doc (showString "]"), doc (showString "("), prt 0 args2, doc (showString ")"), prt 0 block])

instance Print Types.Lambda where
  prt i = \case
    Types.LDec basictype args block -> prPrec i 0 (concatD [prt 0 basictype, doc (showString "lambda"), doc (showString "("), prt 0 args, doc (showString ")"), prt 0 block])

instance Print Types.PBlock where
  prt i = \case
    Types.FProc proc_ -> prPrec i 0 (concatD [prt 0 proc_])
    Types.FBlok block -> prPrec i 0 (concatD [prt 0 block])
    Types.FVar id_ -> prPrec i 0 (concatD [prt 0 id_])

instance Print Types.Arg where
  prt i = \case
    Types.FArg type_ id_ -> prPrec i 0 (concatD [prt 0 type_, prt 0 id_])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [Types.Arg] where
  prt = prtList

instance Print Types.Expr where
  prt i = \case
    Types.EVar id_ -> prPrec i 6 (concatD [prt 0 id_])
    Types.EInt n -> prPrec i 6 (concatD [prt 0 n])
    Types.ETrue -> prPrec i 6 (concatD [doc (showString "true")])
    Types.EFalse -> prPrec i 6 (concatD [doc (showString "false")])
    Types.EString str -> prPrec i 6 (concatD [prt 0 str])
    Types.EParen expr -> prPrec i 6 (concatD [doc (showString "("), prt 0 expr, doc (showString ")")])
    Types.EProc proc_ -> prPrec i 6 (concatD [prt 0 proc_])
    Types.ELamb lambda -> prPrec i 6 (concatD [prt 0 lambda])
    Types.ECall expr exprs -> prPrec i 6 (concatD [prt 6 expr, doc (showString "("), prt 0 exprs, doc (showString ")")])
    Types.EStringify expr -> prPrec i 6 (concatD [doc (showString "to_str"), doc (showString "("), prt 0 expr, doc (showString ")")])
    Types.EArr exprs -> prPrec i 6 (concatD [doc (showString "["), prt 0 exprs, doc (showString "]")])
    Types.EArrRead id_ expr -> prPrec i 6 (concatD [prt 0 id_, doc (showString "["), prt 0 expr, doc (showString "]")])
    Types.Neg expr -> prPrec i 5 (concatD [doc (showString "-"), prt 6 expr])
    Types.Not expr -> prPrec i 5 (concatD [doc (showString "!"), prt 5 expr])
    Types.EMul expr1 mulop expr2 -> prPrec i 4 (concatD [prt 4 expr1, prt 0 mulop, prt 4 expr2])
    Types.EAdd expr1 addop expr2 -> prPrec i 3 (concatD [prt 3 expr1, prt 0 addop, prt 3 expr2])
    Types.EComp expr1 compop expr2 -> prPrec i 2 (concatD [prt 2 expr1, prt 0 compop, prt 2 expr2])
    Types.EAnd expr1 expr2 -> prPrec i 1 (concatD [prt 1 expr1, doc (showString "&&"), prt 1 expr2])
    Types.EOr expr1 expr2 -> prPrec i 0 (concatD [prt 0 expr1, doc (showString "||"), prt 0 expr2])
  prtList _ [] = concatD []
  prtList _ [x] = concatD [prt 0 x]
  prtList _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [Types.Expr] where
  prt = prtList

instance Print Types.AddOp where
  prt i = \case
    Types.Plus -> prPrec i 0 (concatD [doc (showString "+")])
    Types.Minus -> prPrec i 0 (concatD [doc (showString "-")])

instance Print Types.MulOp where
  prt i = \case
    Types.Times -> prPrec i 0 (concatD [doc (showString "*")])
    Types.Div -> prPrec i 0 (concatD [doc (showString "/")])
    Types.Mod -> prPrec i 0 (concatD [doc (showString "%")])

instance Print Types.CompOp where
  prt i = \case
    Types.Low -> prPrec i 0 (concatD [doc (showString "<")])
    Types.Grt -> prPrec i 0 (concatD [doc (showString ">")])
    Types.LowEq -> prPrec i 0 (concatD [doc (showString "<=")])
    Types.GrtEq -> prPrec i 0 (concatD [doc (showString ">=")])
    Types.Eq -> prPrec i 0 (concatD [doc (showString "==")])
    Types.NEq -> prPrec i 0 (concatD [doc (showString "!=")])

