--- 1. Typy: void, int, bool, string, lamda, proc
--- 2. Literały, arytmetyka, porównania
--- 3. Zmienne, przypisanie
--- 4. Print
--- 5. while, if (z else i bez, może być też składnia if _ elif _ else _ endif).
--- 6. Funkcje, procedury i rekurencja.
--- 7. co najmniej dwa sposoby przekazywania parametrów (przez zmienną / przez wartość),
--- 8. Pętla for
--- ✓ 15p ✓
--- 9. Identyfikatory ze statycznym wiązaniem
--- 10. Obsługa błędów wykonania
--- 11. Funkcje zwracające wartość 
--- ✓ 20p ✓
--- 12. Statyczne typowanie – 4pkt,
--- 13. Funkcje zagnieżdżone ze statycznym wiązaniem – 2 pkt,
--- 14. Tablice - 1 pkt
--- 15. Funkcje anonimowe i dynamiczne definiowanie funkcji - 3 pkt
---
--- ✓ 30p ✓
---
--- Program zaczyna się jako funkcja int main 
--- Zmienne są domyślnie deklarowane jako stałe, aby móc je edytować trzeba dodać słowo klucz "mut" od mutable
--- Instruckje specjalne: proc, lambda, do end, for, while, if, else, print, return
--- Można przekazywać wartości do funkcji jako referencje, mutable, mutable referencje lub wartości. 
--- Funkcja zadeklarowana z blokiem domyślnie jest traktowane jak deklarowanie z lambdą. 
--- Pętla for przyjmuje proces który przyjmuje jedną wartość typu elementów tablicy po której jest wykonywana iteracja.
--- Wyjątki pojawiają się przy dzieleniu przez zero, błedów składni, wywołaniu jednego procesu w dwóch miejscach gdzie zmienna
--- do której się odwołuje w dwóch środowiskach ma inny typ.
--- Proces jest domyślnie typu void i po prostu wykonuje ciąg instrukcji ze środowiska w którym został wywołany

------------------------- programs ---------------------------
entrypoints  Program ;
MyProgram.   Program ::= [Stmt] ;

------------------------- stmt -------------------------------
Blok.        Block ::= "do" [Stmt] "end" ;
AsProc.      HBlock ::= PBlock ;
AsStmt.      HBlock ::= Stmt ;

BStmt.       Stmt ::= Block ;
DeclMut.     Stmt ::= BasicType "mut" Ident "=" Expr ;
DeclConst.   Stmt ::= BasicType Ident "=" Expr ;
Ass.         Stmt ::= Ident "=" Expr ;
ArrAss.      Stmt ::= Ident "[" Expr "]" "=" Expr ;
Ret.         Stmt ::= "return" Expr ;
If.          Stmt ::= "if" "(" Expr ")" HBlock ;
IfElse.      Stmt ::= "if" "(" Expr ")" HBlock "else" HBlock ;
While.       Stmt ::= "while" "(" Expr ")" HBlock ;
Print.       Stmt ::= "print" "(" Expr ")" ;
For.         Stmt ::= "for" Expr Proc ;
SExp.        Stmt ::= Expr ;
_.           Stmt ::= Stmt ";" ;
terminator   Stmt ";" ;

------------------------- types ------------------------------
Ref.         Type ::= "&" BasicType ;
MutRef.      Type ::= "&mut" BasicType ;
Mut.         Type ::= "mut" BasicType ;
Const.       Type ::= BasicType ;
separator    Type "," ;

Arr.         BasicType ::= BasicType "[]" ;
Int.         BasicType ::= "int" ;
Str.         BasicType ::= "string" ;
Bool.        BasicType ::= "bool" ;
Void.        BasicType ::= "void" ;
Fun.         BasicType ::= BasicType "lambda_type" "(" [Type] ")" ;
TProc.       BasicType ::= BasicType "proc_type" "[" [Arg] "]" "(" [Type] ")" ;
separator    BasicType "," ;

------------------------ functions ---------------------------
PDec.        Proc ::= "proc" "[" [Arg] "]" "(" [Arg] ")" Block ;
LDec.        Lambda ::= BasicType "lambda" "(" [Arg] ")" Block ;
FProc.       PBlock ::= Proc ;
FBlok.       PBlock ::= Block ;
FVar.        PBlock ::= Ident ;

FArg.        Arg ::= Type Ident;
separator    Arg "," ;
FDef.        Stmt ::= "def" BasicType Ident "(" [Arg] ")" PBlock ;
FDefAlt.     Stmt ::= "def" BasicType Ident "(" [Arg] ")" Lambda ;

------------------------- expr -------------------------------
EVar.        Expr6 ::= Ident ;
EInt.        Expr6 ::= Integer ;
ETrue.       Expr6 ::= "true" ;
EFalse.      Expr6 ::= "false" ;
EString.     Expr6 ::= String ;
EParen.      Expr6 ::= "(" Expr ")" ;
EProc.       Expr6 ::= Proc ;
ELamb.       Expr6 ::= Lambda ;
ECall.       Expr6 ::= Expr6 "(" [Expr] ")" ;
EStringify.  Expr6 ::= "to_str" "(" Expr ")" ;
EArr.        Expr6 ::= "[" [Expr] "]" ;
EArrRead.    Expr6 ::= Ident "[" Expr "]" ;

Neg.         Expr5 ::= "-" Expr6 ;
Not.         Expr5 ::= "!" Expr5 ;
EMul.        Expr4 ::= Expr4 MulOp Expr4 ;
EAdd.        Expr3 ::= Expr3 AddOp Expr3 ;
EComp.       Expr2 ::= Expr2 CompOp Expr2 ;
EAnd.        Expr1 ::= Expr1 "&&" Expr1 ;
EOr.         Expr ::= Expr "||" Expr ;
separator    Expr "," ;
coercions    Expr 6 ;

------------------------- operators --------------------------
Plus.        AddOp ::= "+" ;
Minus.       AddOp ::= "-" ;
Times.       MulOp ::= "*" ;
Div.         MulOp ::= "/" ;
Mod.         MulOp ::= "%" ;
Low.         CompOp ::= "<" ;
Grt.         CompOp ::= ">" ;
LowEq.       CompOp ::= "<=" ;
GrtEq.       CompOp ::= ">=" ;
Eq.          CompOp ::= "==" ;
NEq.         CompOp ::= "!=" ;

------------------------- comments ----------------------------
comment      "#" ;
comment      "<#" "#>" ;
