-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language syntax.

module Syntax.Abs where

import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Program = MyProgram [Stmt]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Block = Blok [Stmt]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data HBlock = AsProc PBlock | AsStmt Stmt
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Stmt
    = BStmt Block
    | DeclMut BasicType Ident Expr
    | DeclConst BasicType Ident Expr
    | Ass Ident Expr
    | ArrAss Ident Expr Expr
    | Ret Expr
    | If Expr HBlock
    | IfElse Expr HBlock HBlock
    | While Expr HBlock
    | Print Expr
    | For Expr Proc
    | SExp Expr
    | FDef BasicType Ident [Arg] PBlock
    | FDefAlt BasicType Ident [Arg] Lambda
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Type
    = Ref BasicType
    | MutRef BasicType
    | Mut BasicType
    | Const BasicType
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data BasicType
    = Arr BasicType
    | Int
    | Str
    | Bool
    | Void
    | Fun BasicType [Type]
    | TProc BasicType [Arg] [Type]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Proc = PDec [Arg] [Arg] Block
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Lambda = LDec BasicType [Arg] Block
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PBlock = FProc Proc | FBlok Block | FVar Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Arg = FArg Type Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Expr
    = EVar Ident
    | EInt Integer
    | ETrue
    | EFalse
    | EString String
    | EParen Expr
    | EProc Proc
    | ELamb Lambda
    | ECall Expr [Expr]
    | EStringify Expr
    | EArr [Expr]
    | EArrRead Ident Expr
    | Neg Expr
    | Not Expr
    | EMul Expr MulOp Expr
    | EAdd Expr AddOp Expr
    | EComp Expr CompOp Expr
    | EAnd Expr Expr
    | EOr Expr Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AddOp = Plus | Minus
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MulOp = Times | Div | Mod
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data CompOp = Low | Grt | LowEq | GrtEq | Eq | NEq
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

