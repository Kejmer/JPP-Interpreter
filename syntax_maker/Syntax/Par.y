-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Syntax.Par
  ( happyError
  , myLexer
  , pProgram
  ) where

import Prelude

import qualified Syntax.Abs
import Syntax.Lex

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&' { PT _ (TS _ 4) }
  '&&' { PT _ (TS _ 5) }
  '&mut' { PT _ (TS _ 6) }
  '(' { PT _ (TS _ 7) }
  ')' { PT _ (TS _ 8) }
  '*' { PT _ (TS _ 9) }
  '+' { PT _ (TS _ 10) }
  ',' { PT _ (TS _ 11) }
  '-' { PT _ (TS _ 12) }
  '/' { PT _ (TS _ 13) }
  ';' { PT _ (TS _ 14) }
  '<' { PT _ (TS _ 15) }
  '<=' { PT _ (TS _ 16) }
  '=' { PT _ (TS _ 17) }
  '==' { PT _ (TS _ 18) }
  '>' { PT _ (TS _ 19) }
  '>=' { PT _ (TS _ 20) }
  '[' { PT _ (TS _ 21) }
  '[]' { PT _ (TS _ 22) }
  ']' { PT _ (TS _ 23) }
  'bool' { PT _ (TS _ 24) }
  'def' { PT _ (TS _ 25) }
  'do' { PT _ (TS _ 26) }
  'else' { PT _ (TS _ 27) }
  'end' { PT _ (TS _ 28) }
  'false' { PT _ (TS _ 29) }
  'for' { PT _ (TS _ 30) }
  'if' { PT _ (TS _ 31) }
  'int' { PT _ (TS _ 32) }
  'lambda' { PT _ (TS _ 33) }
  'mut' { PT _ (TS _ 34) }
  'print' { PT _ (TS _ 35) }
  'proc' { PT _ (TS _ 36) }
  'return' { PT _ (TS _ 37) }
  'string' { PT _ (TS _ 38) }
  'to_str' { PT _ (TS _ 39) }
  'true' { PT _ (TS _ 40) }
  'void' { PT _ (TS _ 41) }
  'while' { PT _ (TS _ 42) }
  '||' { PT _ (TS _ 43) }
  L_Ident  { PT _ (TV $$) }
  L_integ  { PT _ (TI $$) }
  L_quoted { PT _ (TL $$) }

%%

Ident :: { Syntax.Abs.Ident }
Ident  : L_Ident { Syntax.Abs.Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

String  :: { String }
String   : L_quoted { $1 }

Program :: { Syntax.Abs.Program }
Program : ListStmt { Syntax.Abs.MyProgram $1 }

Block :: { Syntax.Abs.Block }
Block : 'do' ListStmt 'end' { Syntax.Abs.Blok $2 }

HBlock :: { Syntax.Abs.HBlock }
HBlock : PBlock { Syntax.Abs.AsProc $1 }
       | Stmt { Syntax.Abs.AsStmt $1 }

Stmt :: { Syntax.Abs.Stmt }
Stmt : Block { Syntax.Abs.BStmt $1 }
     | BasicType 'mut' Ident '=' Expr { Syntax.Abs.DeclConst $1 $3 $5 }
     | BasicType Ident '=' Expr { Syntax.Abs.DeclMut $1 $2 $4 }
     | Ident '=' Expr { Syntax.Abs.Ass $1 $3 }
     | Ident '[' Expr ']' '=' Expr { Syntax.Abs.ArrAss $1 $3 $6 }
     | 'return' Expr { Syntax.Abs.Ret $2 }
     | 'if' '(' Expr ')' HBlock { Syntax.Abs.If $3 $5 }
     | 'if' '(' Expr ')' HBlock 'else' HBlock { Syntax.Abs.IfElse $3 $5 $7 }
     | 'while' '(' Expr ')' HBlock { Syntax.Abs.While $3 $5 }
     | 'print' '(' Expr ')' { Syntax.Abs.Print $3 }
     | 'for' Expr Proc { Syntax.Abs.For $2 $3 }
     | Expr { Syntax.Abs.SExp $1 }
     | Stmt ';' { $1 }
     | 'def' BasicType Ident '(' ListArg ')' PBlock { Syntax.Abs.FDef $2 $3 $5 $7 }
     | 'def' BasicType Ident '(' ListArg ')' Lambda { Syntax.Abs.FDefAlt $2 $3 $5 $7 }

ListStmt :: { [Syntax.Abs.Stmt] }
ListStmt : {- empty -} { [] } | Stmt ';' ListStmt { (:) $1 $3 }

Type :: { Syntax.Abs.Type }
Type : '&' BasicType { Syntax.Abs.Ref $2 }
     | '&mut' BasicType { Syntax.Abs.MutRef $2 }
     | 'mut' BasicType { Syntax.Abs.Mut $2 }
     | BasicType { Syntax.Abs.Const $1 }

ListType :: { [Syntax.Abs.Type] }
ListType : {- empty -} { [] }
         | Type { (:[]) $1 }
         | Type ',' ListType { (:) $1 $3 }

BasicType :: { Syntax.Abs.BasicType }
BasicType : BasicType '[]' { Syntax.Abs.Arr $1 }
          | 'int' { Syntax.Abs.Int }
          | 'string' { Syntax.Abs.Str }
          | 'bool' { Syntax.Abs.Bool }
          | 'void' { Syntax.Abs.Void }
          | BasicType 'lambda' '(' ListType ')' { Syntax.Abs.Fun $1 $4 }
          | BasicType 'proc' '[' ListArg ']' '(' ListType ')' { Syntax.Abs.TProc $1 $4 $7 }

ListBasicType :: { [Syntax.Abs.BasicType] }
ListBasicType : {- empty -} { [] }
              | BasicType { (:[]) $1 }
              | BasicType ',' ListBasicType { (:) $1 $3 }

Proc :: { Syntax.Abs.Proc }
Proc : 'proc' '[' ListArg ']' '(' ListArg ')' Block { Syntax.Abs.PDec $3 $6 $8 }

Lambda :: { Syntax.Abs.Lambda }
Lambda : BasicType 'lambda' '(' ListArg ')' Block { Syntax.Abs.LDec $1 $4 $6 }

PBlock :: { Syntax.Abs.PBlock }
PBlock : Proc { Syntax.Abs.FProc $1 }
       | Block { Syntax.Abs.FBlok $1 }
       | Ident { Syntax.Abs.FVar $1 }

Arg :: { Syntax.Abs.Arg }
Arg : Type Ident { Syntax.Abs.FArg $1 $2 }

ListArg :: { [Syntax.Abs.Arg] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }

Expr6 :: { Syntax.Abs.Expr }
Expr6 : Ident { Syntax.Abs.EVar $1 }
      | Integer { Syntax.Abs.EInt $1 }
      | 'true' { Syntax.Abs.ETrue }
      | 'false' { Syntax.Abs.EFalse }
      | String { Syntax.Abs.EString $1 }
      | '(' Expr ')' { Syntax.Abs.EParen $2 }
      | Proc { Syntax.Abs.EProc $1 }
      | Lambda { Syntax.Abs.ELamb $1 }
      | Expr6 '(' ListExpr ')' { Syntax.Abs.ECall $1 $3 }
      | 'to_str' '(' Expr ')' { Syntax.Abs.EStringify $3 }
      | '[' ListExpr ']' { Syntax.Abs.EArr $2 }
      | Ident '[' Expr ']' { Syntax.Abs.EArrRead $1 $3 }
      | '(' Expr ')' { $2 }

Expr5 :: { Syntax.Abs.Expr }
Expr5 : '-' Expr6 { Syntax.Abs.Neg $2 }
      | '!' Expr5 { Syntax.Abs.Not $2 }
      | Expr6 { $1 }

Expr4 :: { Syntax.Abs.Expr }
Expr4 : Expr4 MulOp Expr4 { Syntax.Abs.EMul $1 $2 $3 }
      | Expr5 { $1 }

Expr3 :: { Syntax.Abs.Expr }
Expr3 : Expr3 AddOp Expr3 { Syntax.Abs.EAdd $1 $2 $3 }
      | Expr4 { $1 }

Expr2 :: { Syntax.Abs.Expr }
Expr2 : Expr2 CompOp Expr2 { Syntax.Abs.EComp $1 $2 $3 }
      | Expr3 { $1 }

Expr1 :: { Syntax.Abs.Expr }
Expr1 : Expr1 '&&' Expr1 { Syntax.Abs.EAnd $1 $3 } | Expr2 { $1 }

Expr :: { Syntax.Abs.Expr }
Expr : Expr '||' Expr { Syntax.Abs.EOr $1 $3 } | Expr1 { $1 }

ListExpr :: { [Syntax.Abs.Expr] }
ListExpr : {- empty -} { [] }
         | Expr { (:[]) $1 }
         | Expr ',' ListExpr { (:) $1 $3 }

AddOp :: { Syntax.Abs.AddOp }
AddOp : '+' { Syntax.Abs.Plus } | '-' { Syntax.Abs.Minus }

MulOp :: { Syntax.Abs.MulOp }
MulOp : '*' { Syntax.Abs.Times }
      | '/' { Syntax.Abs.Div }
      | '%' { Syntax.Abs.Mod }

CompOp :: { Syntax.Abs.CompOp }
CompOp : '<' { Syntax.Abs.Low }
       | '>' { Syntax.Abs.Grt }
       | '<=' { Syntax.Abs.LowEq }
       | '>=' { Syntax.Abs.GrtEq }
       | '==' { Syntax.Abs.Eq }
       | '!=' { Syntax.Abs.NEq }
{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

